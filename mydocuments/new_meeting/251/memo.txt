従来のデバッグ支援機構
・割り込み挿入手法
・ロギング/リプレイ手法


従来のデバッグ手法の問題点

割り込み挿入手法での問題点
(1)実計算機で発生する間隔での複数の割り込みが困難
    割り込み挿入法ではデバッグ対象OSのコードにハイパーコールを挿入し,
    割り込みを発生させるため,コードが実行されるタイミングはOSの処理速度に依存する．
    このため調整によってCPUへ発生する間隔で複数の割り込みが発生する間隔を調整することは
    困難である．実計算機上で発生する間隔で複数の割り込みを発生させるのが困難である．
    
ロギング/リプレイ手法での問題点
(2)任意のタイミングでの割り込み発生が困難
    ロギングリプレイ手法では，ロギング時に発生した割り込みに対する処理をリプレイ時に
    確認できる．しかし，任意のタイミングで割り込みを発生させるためには,再現情報として
    割り込みを発生させるアドレスと分岐回数をプログラマが用意しなければならない．
    これらの指定が困難であるため，任意のタイミングで割り込みを発生させることが困難である．
(3)実割り込みの発生が困難
    ロギングにおけるデバッグ対象OSとハイパーバイザの間の処理の遷移や再現情報の格納による処理
    負荷が発生する.このため，実割り込みがロギング中に発生しないと考えられる．ロギング中に実割り込みが
    発生しない場合，実割り込みを再現するための再現情報を保存できない．このため，実割り込みの発生が困難である．
    
これらの問題点から，割り込み処理のデバッグには，デバッグ対象OSがデバッグ支援機構の処理負荷の影響を受けない環境が
必要．

Mintは1台の計算機上で仮想化方式を用いずに複数のLinuxを走行させる方式であるので
上記の問題を解決できる．

Mintを用いた割り込み処理のデバッグ支援環境を設計する目的について以下に示す．
(1)実割り込みを発生させる環境の提供
(2)任意のタイミングで割り込みを発生させる環境の提供

Mintを用いた割り込み処理のデバッグ支援環境における課題について以下に示す．
(1)ハイパーバイザを用いないデバッグ支援環境の提供
(2)デバッグ対象OSがデバッグ支援機構の処理負荷の影響を受けないデバッグ支援環境の提供
(3)CPUへの割り込みの発生

対処
(1)Mintを用いたデバッグ対象OSとデバッグ支援OSの同時走行
(2)Inter-Processor Interruptの送信
